name: Cross Compile dns2tcp-plus

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '输入版本号, 例如：v1.2.0'
        required: false
        default: 'manual-build'
      release_notes:
        description: '更新说明 (可选)'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          # ARM64 变体
          - arch: aarch64
            gcc: aarch64-linux-gnu
            target_name: aarch64-linux-musl@generic+v8a
            extra_flags: "-march=armv8-a"
          - arch: aarch64
            gcc: aarch64-linux-gnu
            target_name: aarch64-linux-musl@generic+v9a
            extra_flags: "-march=armv8.4-a"
          
          # ARM32 变体 - musleabi
          - arch: arm
            gcc: arm-linux-gnueabi
            target_name: arm-linux-musleabi@generic+v5t+soft_float
            extra_flags: "-march=armv5t -mfloat-abi=soft"
          - arch: arm
            gcc: arm-linux-gnueabi
            target_name: arm-linux-musleabi@generic+v5te+soft_float
            extra_flags: "-march=armv5te -mfloat-abi=soft"
          - arch: arm
            gcc: arm-linux-gnueabi
            target_name: arm-linux-musleabi@generic+v6+soft_float
            extra_flags: "-march=armv6 -mfloat-abi=soft"
          - arch: arm
            gcc: arm-linux-gnueabi
            target_name: arm-linux-musleabi@generic+v6t2+soft_float
            extra_flags: "-march=armv6t2 -mfloat-abi=soft"
          - arch: arm
            gcc: arm-linux-gnueabi
            target_name: arm-linux-musleabi@generic+v7a
            extra_flags: "-march=armv7-a -mfloat-abi=soft"
          
          # ARM32 变体 - musleabihf
          - arch: arm
            gcc: arm-linux-gnueabihf
            target_name: arm-linux-musleabihf@generic+v7a
            extra_flags: "-march=armv7-a -mfloat-abi=hard"
          
          # x86 32位变体
          - arch: i386
            gcc: i686-linux-gnu
            target_name: i386-linux-musl@i686
            extra_flags: "-m32 -march=i686"
          - arch: i386
            gcc: i686-linux-gnu
            target_name: i386-linux-musl@pentium4
            extra_flags: "-m32 -march=pentium4"
          
          # x86 64位
          - arch: x86_64
            gcc: x86_64-linux-gnu
            target_name: x86_64-linux-musl@generic
            extra_flags: "-m64"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        case "${{ matrix.arch }}" in
          aarch64)
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            ;;
          arm)
            sudo apt-get install -y gcc-arm-linux-gnueabi g++-arm-linux-gnueabi
            sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
            ;;
          i386)
            sudo apt-get install -y gcc-multilib g++-multilib
            ;;
          x86_64)
            # Native compilation, no additional tools needed
            ;;
        esac

    - name: Build dns2tcp-plus
      run: |
        echo "Building for ${{ matrix.target_name }}"
        
        # Set up cross-compilation environment
        case "${{ matrix.arch }}" in
          aarch64)
            export CC="${{ matrix.gcc }}-gcc"
            export STRIP="${{ matrix.gcc }}-strip"
            export CFLAGS="-Os -static ${{ matrix.extra_flags }}"
            export LDFLAGS="-static"
            ;;
          arm)
            export CC="${{ matrix.gcc }}-gcc"
            export STRIP="${{ matrix.gcc }}-strip"
            export CFLAGS="-Os -static ${{ matrix.extra_flags }}"
            export LDFLAGS="-static"
            ;;
          i386)
            export CC="gcc"
            export STRIP="strip"
            export CFLAGS="-Os -static ${{ matrix.extra_flags }}"
            export LDFLAGS="-static ${{ matrix.extra_flags }}"
            ;;
          x86_64)
            export CC="gcc"
            export STRIP="strip"
            export CFLAGS="-Os -static ${{ matrix.extra_flags }}"
            export LDFLAGS="-static ${{ matrix.extra_flags }}"
            ;;
        esac
        
        echo "Compiler: $CC"
        echo "CFLAGS: $CFLAGS"
        echo "LDFLAGS: $LDFLAGS"
        
        # Test compiler
        $CC --version || echo "Warning: Compiler test failed"
        
        # Clean and build
        make clean || true
        
        # Try to build, with fallback for unsupported CPU flags
        if ! make CC="$CC" CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"; then
            echo "Build failed with specific CPU flags, trying fallback..."
            # Fallback with basic flags
            case "${{ matrix.arch }}" in
              aarch64)
                export CFLAGS="-Os -static -march=armv8-a"
                export LDFLAGS="-static"
                ;;
              arm)
                export CFLAGS="-Os -static -march=armv7-a"
                export LDFLAGS="-static"
                ;;
              i386)
                export CFLAGS="-Os -static -m32"
                export LDFLAGS="-static -m32"
                ;;
              x86_64)
                export CFLAGS="-Os -static -m64"
                export LDFLAGS="-static -m64"
                ;;
            esac
            echo "Fallback CFLAGS: $CFLAGS"
            echo "Fallback LDFLAGS: $LDFLAGS"
            make CC="$CC" CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"
        fi
        
        # Strip binary to reduce size
        $STRIP dns2tcp || echo "Strip failed, continuing..."
        
        # Check the generated binary
        file dns2tcp
        ls -la dns2tcp
        
        # Rename binary file
        mv dns2tcp dns2tcp-plus@${{ matrix.target_name }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dns2tcp-plus@${{ matrix.target_name }}
        path: dns2tcp-plus@${{ matrix.target_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: dns2tcp-plus ${{ github.event.inputs.version || github.ref_name }}
        body: ${{ github.event.inputs.release_notes }}
        files: dns2tcp-plus@*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
