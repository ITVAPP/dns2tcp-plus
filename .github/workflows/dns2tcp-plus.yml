name: Cross Compile dns2tcp-plus

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '输入版本号, 例如：v1.2.0'
        required: false
        default: 'manual-build'
        type: string
      release_notes:
        description: '更新说明 (支持多行，使用 | 分隔不同行)'
        required: false
        default: ''
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          # ARM64 变体 - Alpine 只有一个 arm64 镜像，通过编译标志区分
          - arch: aarch64
            platform: linux/arm64
            alpine_arch: aarch64
            target_name: aarch64-linux-musl@generic+v8a
            extra_flags: "-march=armv8-a"
          - arch: aarch64
            platform: linux/arm64
            alpine_arch: aarch64
            target_name: aarch64-linux-musl@generic+v9a
            extra_flags: "-march=armv8.4-a"
          
          # ARM32 变体 - 使用不同的 Alpine ARM 镜像
          - arch: arm
            platform: linux/arm/v6
            alpine_arch: armhf
            target_name: arm-linux-musleabi@generic+v5t+soft_float
            extra_flags: "-march=armv5t -mfloat-abi=soft -marm"
          - arch: arm
            platform: linux/arm/v6
            alpine_arch: armhf
            target_name: arm-linux-musleabi@generic+v5te+soft_float
            extra_flags: "-march=armv5te -mfloat-abi=soft -marm"
          - arch: arm
            platform: linux/arm/v6
            alpine_arch: armhf
            target_name: arm-linux-musleabi@generic+v6+soft_float
            extra_flags: "-march=armv6 -mfloat-abi=soft"
          - arch: arm
            platform: linux/arm/v6
            alpine_arch: armhf
            target_name: arm-linux-musleabi@generic+v6t2+soft_float
            extra_flags: "-march=armv6t2 -mfloat-abi=soft"
          - arch: arm
            platform: linux/arm/v7
            alpine_arch: armv7
            target_name: arm-linux-musleabi@generic+v7a
            extra_flags: "-march=armv7-a -mfloat-abi=soft"
          
          # ARM32 硬浮点
          - arch: arm
            platform: linux/arm/v7
            alpine_arch: armv7
            target_name: arm-linux-musleabihf@generic+v7a
            extra_flags: "-march=armv7-a -mfloat-abi=hard -mfpu=vfpv3-d16"
          
          # x86 32位变体
          - arch: i386
            platform: linux/386
            alpine_arch: x86
            target_name: i386-linux-musl@i686
            extra_flags: "-march=i686"
          - arch: i386
            platform: linux/386
            alpine_arch: x86
            target_name: i386-linux-musl@pentium4
            extra_flags: "-march=pentium4"
          
          # x86 64位
          - arch: x86_64
            platform: linux/amd64
            alpine_arch: x86_64
            target_name: x86_64-linux-musl@generic
            extra_flags: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Build in Alpine container
      run: |
        # 创建构建脚本
        cat > build.sh << 'EOF'
        #!/bin/sh
        set -e
        
        echo "=== Build environment ==="
        echo "Platform: $PLATFORM"
        echo "Target: $TARGET_NAME"
        echo "Extra flags: $EXTRA_FLAGS"
        echo "Architecture: $(uname -m)"
        
        echo "=== Installing dependencies ==="
        apk add --no-cache gcc musl-dev openssl-dev openssl-libs-static make linux-headers
        
        echo "=== Compiler info ==="
        gcc --version
        
        echo "=== Building dns2tcp-plus ==="
        make clean || true
        
        # 设置编译标志
        export CFLAGS="-Os -static $EXTRA_FLAGS"
        export LDFLAGS="-static"
        export LIBS="-lssl -lcrypto -ldl -lpthread -lm"
        
        echo "CFLAGS: $CFLAGS"
        echo "LDFLAGS: $LDFLAGS"
        echo "LIBS: $LIBS"
        
        # 尝试编译，如果失败则使用基础标志
        if ! make CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" LIBS="$LIBS"; then
            echo "=== Build failed, trying with basic flags ==="
            export CFLAGS="-Os -static"
            make clean || true
            make CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" LIBS="$LIBS"
        fi
        
        echo "=== Stripping binary ==="
        strip dns2tcp-plus || echo "Strip failed, continuing..."
        
        echo "=== Binary info ==="
        file dns2tcp-plus
        ls -la dns2tcp-plus
        
        # 检查是否真的是静态链接
        if ldd dns2tcp-plus 2>&1 | grep -q "not a dynamic executable"; then
            echo "✓ Binary is statically linked"
        else
            echo "⚠ Warning: Binary might not be fully static"
            ldd dns2tcp-plus || true
        fi
        
        echo "=== Renaming binary ==="
        mv dns2tcp-plus "dns2tcp-plus@$TARGET_NAME"
        EOF
        
        chmod +x build.sh
        
        # 在 Docker 容器中执行构建
        docker run --rm \
          --platform "${{ matrix.platform }}" \
          -v "$PWD:/work" \
          -w /work \
          -e PLATFORM="${{ matrix.platform }}" \
          -e TARGET_NAME="${{ matrix.target_name }}" \
          -e EXTRA_FLAGS="${{ matrix.extra_flags }}" \
          alpine:latest \
          /work/build.sh

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dns2tcp-plus@${{ matrix.target_name }}
        path: dns2tcp-plus@${{ matrix.target_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Set release info
      id: release_info
      run: |
        # 设置版本号
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_NOTES_RAW="${{ github.event.inputs.release_notes }}"
        else
          VERSION="${{ github.ref_name }}"
          RELEASE_NOTES_RAW=""
        fi
        
        # 如果版本号为空或是默认值，使用 ref_name
        if [ -z "$VERSION" ] || [ "$VERSION" = "manual-build" ]; then
          VERSION="${{ github.ref_name }}"
        fi
        
        # 将 | 替换为真正的换行符
        RELEASE_NOTES=$(echo "$RELEASE_NOTES_RAW" | sed 's/ | /\n/g' | sed 's/|/\n/g')
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_info.outputs.version }}
        name: dns2tcp-plus ${{ steps.release_info.outputs.version }}
        body: ${{ steps.release_info.outputs.release_notes }}
        files: dns2tcp-plus@*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
