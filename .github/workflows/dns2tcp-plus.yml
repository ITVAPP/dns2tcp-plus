name: Cross Compile dns2tcp-plus

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '输入版本号, 例如：v2.0.0'
        required: false
        default: 'manual-build'
        type: string
      release_notes:
        description: '更新说明 (支持多行，使用 | 分隔不同行)'
        required: false
        default: ''
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          # x86_64
          - platform: linux/amd64
            arch: x86_64
            target_name: x86_64-linux-musl@generic
            
          # x86 32-bit
          - platform: linux/386
            arch: i386
            target_name: i386-linux-musl@i686
            
          # ARM64 v8
          - platform: linux/arm64/v8
            arch: aarch64
            target_name: aarch64-linux-musl@generic+v8a
            
          # ARM32 v7
          - platform: linux/arm/v7
            arch: armv7
            target_name: arm-linux-musleabihf@generic+v7a
            
          # ARM32 v6
          - platform: linux/arm/v6
            arch: armv6
            target_name: arm-linux-musleabi@generic+v6+soft_float

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build in Alpine container
      run: |
        # 创建构建脚本
        cat > build.sh << 'SCRIPT'
        #!/bin/sh
        set -e
        
        # 安装构建依赖
        apk add --no-cache build-base openssl-dev openssl-libs-static linux-headers
        
        # 显示环境信息
        echo "Architecture: $(uname -m)"
        echo "GCC version: $(gcc --version | head -n1)"
        echo "OpenSSL version: $(openssl version)"
        
        # 清理
        make clean || true
        
        # 创建静态链接的 Makefile
        cat > Makefile.static << 'EOF'
        CC = gcc
        CFLAGS = -std=c99 -Wall -Wextra -O3 -DNDEBUG -ffunction-sections -fdata-sections
        LDFLAGS = -static -Wl,--gc-sections
        LIBS = -lssl -lcrypto -lz -ldl -lpthread -lm
        
        SRCS = dns2tcp-plus.c libev/ev.c
        OBJS = $(SRCS:.c=.o)
        MAIN = dns2tcp-plus
        
        all: $(MAIN)
        
        $(MAIN): $(OBJS)
        	$(CC) $(LDFLAGS) -o $(MAIN) $(OBJS) $(LIBS)
        
        dns2tcp-plus.o: dns2tcp-plus.c
        	$(CC) $(CFLAGS) -c dns2tcp-plus.c -o dns2tcp-plus.o
        
        libev/ev.o: libev/ev.c
        	$(CC) $(CFLAGS) -DEV_STANDALONE=1 -c libev/ev.c -o libev/ev.o
        
        clean:
        	$(RM) $(MAIN) $(OBJS)
        EOF
        
        # 编译
        make -f Makefile.static
        
        # Strip 优化大小
        strip -s dns2tcp-plus
        
        # 检查文件
        echo "=== File info ==="
        file dns2tcp-plus
        ls -la dns2tcp-plus
        
        # 检查是否静态链接
        echo "=== Checking static linking ==="
        if ldd dns2tcp-plus 2>&1 | grep -q "not a dynamic executable"; then
          echo "✓ Binary is statically linked"
        else
          echo "✗ Warning: Binary may not be fully static"
          ldd dns2tcp-plus || true
        fi
        
        # 测试运行
        echo "=== Testing binary ==="
        ./dns2tcp-plus -V || echo "Version check failed (may be normal for cross-compiled binaries)"
        SCRIPT
        
        chmod +x build.sh
        
        # 使用 Docker 在对应架构的 Alpine 容器中构建
        docker run --rm \
          --platform=${{ matrix.platform }} \
          -v "$PWD:/work" \
          -w /work \
          alpine:3.19 \
          sh -c './build.sh'
        
        # 重命名输出文件
        mv dns2tcp-plus dns2tcp-plus@${{ matrix.target_name }}

    - name: Compress with UPX (optional)
      continue-on-error: true
      run: |
        # 安装 UPX
        wget -q https://github.com/upx/upx/releases/download/v4.2.2/upx-4.2.2-amd64_linux.tar.xz
        tar xf upx-4.2.2-amd64_linux.tar.xz
        
        # 备份原始文件
        cp dns2tcp-plus@${{ matrix.target_name }} dns2tcp-plus@${{ matrix.target_name }}.orig
        
        # 尝试压缩（某些架构可能不支持）
        if ./upx-4.2.2-amd64_linux/upx --best --lzma dns2tcp-plus@${{ matrix.target_name }}; then
          echo "UPX compression successful"
          ls -la dns2tcp-plus@${{ matrix.target_name }}*
        else
          echo "UPX compression failed, using original"
          mv dns2tcp-plus@${{ matrix.target_name }}.orig dns2tcp-plus@${{ matrix.target_name }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dns2tcp-plus@${{ matrix.target_name }}
        path: dns2tcp-plus@${{ matrix.target_name }}

  # 为旧版 ARM 设备构建额外版本
  build-legacy-arm:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/arm/v5
            target_name: arm-linux-musleabi@generic+v5t+soft_float
          - platform: linux/arm/v5
            target_name: arm-linux-musleabi@generic+v5te+soft_float

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Build in Alpine container
      run: |
        # 使用相同的构建脚本
        cat > build.sh << 'SCRIPT'
        #!/bin/sh
        set -e
        apk add --no-cache build-base openssl-dev openssl-libs-static linux-headers
        
        cat > Makefile.static << 'EOF'
        CC = gcc
        CFLAGS = -std=c99 -Wall -Wextra -O2 -DNDEBUG -march=armv5t -msoft-float
        LDFLAGS = -static
        LIBS = -lssl -lcrypto -lz -ldl -lpthread -lm
        
        SRCS = dns2tcp-plus.c libev/ev.c
        OBJS = $(SRCS:.c=.o)
        MAIN = dns2tcp-plus
        
        all: $(MAIN)
        
        $(MAIN): $(OBJS)
        	$(CC) $(LDFLAGS) -o $(MAIN) $(OBJS) $(LIBS)
        
        .c.o:
        	$(CC) $(CFLAGS) -c $< -o $@
        
        libev/ev.o: libev/ev.c
        	$(CC) $(CFLAGS) -DEV_STANDALONE=1 -c libev/ev.c -o libev/ev.o
        
        clean:
        	$(RM) $(MAIN) $(OBJS)
        EOF
        
        make -f Makefile.static
        strip -s dns2tcp-plus
        
        file dns2tcp-plus
        ls -la dns2tcp-plus
        SCRIPT
        
        chmod +x build.sh
        
        docker run --rm \
          --platform=${{ matrix.platform }} \
          -v "$PWD:/work" \
          -w /work \
          alpine:3.19 \
          sh -c './build.sh' || echo "Build failed for ${{ matrix.platform }}"
        
        if [ -f dns2tcp-plus ]; then
          mv dns2tcp-plus dns2tcp-plus@${{ matrix.target_name }}
        else
          echo "No binary produced for ${{ matrix.target_name }}"
          # 创建一个占位文件
          echo "Build failed" > dns2tcp-plus@${{ matrix.target_name }}
        fi

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dns2tcp-plus@${{ matrix.target_name }}
        path: dns2tcp-plus@${{ matrix.target_name }}

  release:
    needs: [build, build-legacy-arm]
    runs-on: ubuntu-latest
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Check and filter artifacts
      run: |
        # 列出所有文件
        ls -la dns2tcp-plus@*
        
        # 过滤掉失败的构建（文本文件）
        for f in dns2tcp-plus@*; do
          if file "$f" | grep -q "text"; then
            echo "Removing failed build: $f"
            rm "$f"
          fi
        done
        
        # 显示最终的文件列表
        echo "=== Final binaries ==="
        ls -la dns2tcp-plus@* || echo "No binaries found!"
        
        # 生成 SHA256 校验和
        if ls dns2tcp-plus@* 1> /dev/null 2>&1; then
          sha256sum dns2tcp-plus@* > sha256sums.txt
          cat sha256sums.txt
        fi

    - name: Set release info
      id: release_info
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_NOTES_RAW="${{ github.event.inputs.release_notes }}"
        else
          VERSION="${{ github.ref_name }}"
          RELEASE_NOTES_RAW=""
        fi
        
        if [ -z "$VERSION" ] || [ "$VERSION" = "manual-build" ]; then
          VERSION="${{ github.ref_name }}"
        fi
        
        RELEASE_NOTES=$(echo "$RELEASE_NOTES_RAW" | sed 's/ | /\n/g' | sed 's/|/\n/g')
        
        if [ -z "$RELEASE_NOTES" ]; then
          RELEASE_NOTES="# dns2tcp-plus $VERSION

## 🆕 主要特性 / Major Features

- 🔒 **DNS over TLS (DoT)** - 853端口自动加密 / Automatic encryption on port 853
- 🔄 **系统DNS集成** - 智能故障转移 / System DNS with smart failover
- ⚡ **内存池优化** - 高性能设计 / Memory pool optimization
- 🛡️ **安全增强** - 恶意IP过滤 / Enhanced security features

## 📦 下载说明 / Download Guide

所有二进制文件都是静态链接，可在相应平台直接运行。
All binaries are statically linked and ready to run.

### Intel/AMD
- \`x86_64-linux-musl\` - 64位系统 / 64-bit systems
- \`i386-linux-musl\` - 32位系统 / 32-bit systems

### ARM  
- \`aarch64-linux-musl\` - 64位ARM (树莓派4/5) / 64-bit ARM (RPi 4/5)
- \`arm-linux-musleabihf@v7a\` - 32位ARM (树莓派2/3) / 32-bit ARM (RPi 2/3)
- \`arm-linux-musleabi@v6\` - 旧版ARM (树莓派1) / Older ARM (RPi 1)
- \`arm-linux-musleabi@v5t\` - 更旧设备 / Legacy devices

## 📝 SHA256 校验和 / Checksums

请下载 \`sha256sums.txt\` 验证文件完整性。
Download \`sha256sums.txt\` to verify file integrity."
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_info.outputs.version }}
        name: dns2tcp-plus ${{ steps.release_info.outputs.version }}
        body: ${{ steps.release_info.outputs.release_notes }}
        files: |
          dns2tcp-plus@*
          sha256sums.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
